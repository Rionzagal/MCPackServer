// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using MCPackServer.Entities;

#nullable disable

namespace MCPackServer.Data.Entity
{
    public partial class MCPACKDBContext : DbContext
    {
        public MCPACKDBContext()
        {
        }

        public MCPACKDBContext(DbContextOptions<MCPACKDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ArticleFamilies> ArticleFamilies { get; set; }
        public virtual DbSet<ArticleGroups> ArticleGroups { get; set; }
        public virtual DbSet<ArticlesToPurchase> ArticlesToPurchase { get; set; }
        public virtual DbSet<ArticlesToPurchaseView> ArticlesToPurchaseView { get; set; }
        public virtual DbSet<ArticlesView> ArticlesView { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<AssociatedContactsView> AssociatedContactsView { get; set; }
        public virtual DbSet<ClientContacts> ClientContacts { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<DeviceCodes> DeviceCodes { get; set; }
        public virtual DbSet<Keys> Keys { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<MCProducts> MCProducts { get; set; }
        public virtual DbSet<PersistedGrants> PersistedGrants { get; set; }
        public virtual DbSet<ProjectProducts> ProjectProducts { get; set; }
        public virtual DbSet<ProjectProductsView> ProjectProductsView { get; set; }
        public virtual DbSet<Projects> Projects { get; set; }
        public virtual DbSet<ProjectsView> ProjectsView { get; set; }
        public virtual DbSet<ProviderContacts> ProviderContacts { get; set; }
        public virtual DbSet<Providers> Providers { get; set; }
        public virtual DbSet<PurchaseArticles> PurchaseArticles { get; set; }
        public virtual DbSet<PurchaseOrders> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrdersView> PurchaseOrdersView { get; set; }
        public virtual DbSet<Quotes> Quotes { get; set; }
        public virtual DbSet<QuotesView> QuotesView { get; set; }
        public virtual DbSet<RequisitionArticles> RequisitionArticles { get; set; }
        public virtual DbSet<RequisitionArticlesView> RequisitionArticlesView { get; set; }
        public virtual DbSet<Requisitions> Requisitions { get; set; }
        public virtual DbSet<RequisitionsView> RequisitionsView { get; set; }
        public virtual DbSet<UserInformation> UserInformation { get; set; }
        public virtual DbSet<UserInformationView> UserInformationView { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<ArticleFamilies>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ArticleFamilies)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_ArticleFamilies_ArticleGroups");
            });

            modelBuilder.Entity<ArticleGroups>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<ArticlesToPurchase>(entity =>
            {
                entity.HasKey(e => new { e.QuoteId, e.PurchaseOrderId })
                    .HasName("PK__Articles__FFA0320B4F242D90");

                entity.Property(e => e.DepartureDate).HasPrecision(3);

                entity.Property(e => e.EntryDate).HasPrecision(3);

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.ArticlesToPurchase)
                    .HasForeignKey(d => d.PurchaseOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArticlesToPurchase_PurchaseOrders");

                entity.HasOne(d => d.Quote)
                    .WithMany(p => p.ArticlesToPurchase)
                    .HasForeignKey(d => d.QuoteId)
                    .HasConstraintName("FK_ArticlesToPurchase_Quotes");
            });

            modelBuilder.Entity<ArticlesToPurchaseView>(entity =>
            {
                entity.ToView("ArticlesToPurchaseView");

                entity.Property(e => e.ArticleCode).IsUnicode(false);

                entity.Property(e => e.ArticleName).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.DateUpdated).HasPrecision(3);

                entity.Property(e => e.DepartureDate).HasPrecision(3);

                entity.Property(e => e.EntryDate).HasPrecision(3);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.SKU).IsUnicode(false);

                entity.Property(e => e.TradeMark).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<ArticlesView>(entity =>
            {
                entity.ToView("ArticlesView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.TradeMark).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.Property(e => e.ClaimType).IsUnicode(false);

                entity.Property(e => e.ClaimValue).IsUnicode(false);

                entity.Property(e => e.RoleId).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.ConcurrencyStamp).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.NormalizedName).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.Property(e => e.ClaimType).IsUnicode(false);

                entity.Property(e => e.ClaimValue).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey })
                    .HasName("PK__AspNetUs__2B2C5B52AF8CE553");

                entity.Property(e => e.LoginProvider).IsUnicode(false);

                entity.Property(e => e.ProviderKey).IsUnicode(false);

                entity.Property(e => e.ProviderDisplayName).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK__AspNetUs__AF2760ADC0C08EC5");

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.RoleId).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name })
                    .HasName("PK__AspNetUs__8CC49841C513B5D3");

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.LoginProvider).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.ConcurrencyStamp).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.LockoutEnd).HasPrecision(6);

                entity.Property(e => e.NormalizedEmail).IsUnicode(false);

                entity.Property(e => e.NormalizedUserName).IsUnicode(false);

                entity.Property(e => e.PasswordHash).IsUnicode(false);

                entity.Property(e => e.PhoneNumber).IsUnicode(false);

                entity.Property(e => e.SecurityStamp).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<AssociatedContactsView>(entity =>
            {
                entity.ToView("AssociatedContactsView");

                entity.Property(e => e.CompanyId).IsUnicode(false);

                entity.Property(e => e.EmailAddress).IsUnicode(false);

                entity.Property(e => e.FullName).IsUnicode(false);

                entity.Property(e => e.MobilePhone).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<ClientContacts>(entity =>
            {
                entity.HasKey(e => new { e.ClientId, e.ContactId })
                    .HasName("PK__ClientCo__43B8787D0917B1E8");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientContacts)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_ClientContacts_Clients");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ClientContacts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_ClientContacts_Contacts");
            });

            modelBuilder.Entity<Clients>(entity =>
            {
                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.FiscalAddress).IsUnicode(false);

                entity.Property(e => e.LegalName).IsUnicode(false);

                entity.Property(e => e.MarketName).IsUnicode(false);

                entity.Property(e => e.PaymentCondition).IsUnicode(false);

                entity.Property(e => e.PhoneNumber).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.Province).IsUnicode(false);

                entity.Property(e => e.Website).IsUnicode(false);
            });

            modelBuilder.Entity<Contacts>(entity =>
            {
                entity.Property(e => e.EmailAddress).IsUnicode(false);

                entity.Property(e => e.FullName).IsUnicode(false);

                entity.Property(e => e.MobilePhone).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);
            });

            modelBuilder.Entity<DeviceCodes>(entity =>
            {
                entity.HasKey(e => e.UserCode)
                    .HasName("PK__DeviceCo__1DF52D0DBB559CC6");

                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.Property(e => e.ClientId).IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(6);

                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DeviceCode).IsUnicode(false);

                entity.Property(e => e.Expiration).HasPrecision(6);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SubjectId).IsUnicode(false);
            });

            modelBuilder.Entity<Keys>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.Algorithm).IsUnicode(false);

                entity.Property(e => e.Created).HasPrecision(6);

                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.Use).IsUnicode(false);
            });

            modelBuilder.Entity<Logs>(entity =>
            {
                entity.Property(e => e.Action).IsUnicode(false);

                entity.Property(e => e.Exception).IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.TableName).IsUnicode(false);

                entity.Property(e => e.TimeOfAction).HasPrecision(0);

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Logs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Logs_AspNetUsers");
            });

            modelBuilder.Entity<MCProducts>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PersistedGrants>(entity =>
            {
                entity.HasKey(e => e.Key)
                    .HasName("PK__Persiste__C41E0288EF6C8C17");

                entity.Property(e => e.Key).IsUnicode(false);

                entity.Property(e => e.ClientId).IsUnicode(false);

                entity.Property(e => e.ConsumedTime).HasPrecision(6);

                entity.Property(e => e.CreationTime).HasPrecision(6);

                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Expiration).HasPrecision(6);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SubjectId).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<ProjectProducts>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ProjectId })
                    .HasName("PK__ProjectP__A36D6D2248A13FAB");

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProjectProducts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ProjectProducts_MCProducts");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectProducts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_ProjectProducts_Projects");
            });

            modelBuilder.Entity<ProjectProductsView>(entity =>
            {
                entity.ToView("ProjectProductsView");

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductDescription).IsUnicode(false);

                entity.Property(e => e.ProductModel).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.ProjectNumber).IsUnicode(false);
            });

            modelBuilder.Entity<Projects>(entity =>
            {
                entity.Property(e => e.AdmissionDate).HasPrecision(3);

                entity.Property(e => e.AgreedCurrency).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CommitmentDate).HasPrecision(3);

                entity.Property(e => e.DeliveryDate).HasPrecision(3);

                entity.Property(e => e.DeliveryTime).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.PaymentConditions).IsUnicode(false);

                entity.Property(e => e.PaymentCurrency).IsUnicode(false);

                entity.Property(e => e.ProjectNumber).IsUnicode(false);

                entity.Property(e => e.RealDeliveryDate).HasPrecision(3);

                entity.Property(e => e.SalesPerson).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Proyects_Clients");
            });

            modelBuilder.Entity<ProjectsView>(entity =>
            {
                entity.ToView("ProjectsView");

                entity.Property(e => e.AdmissionDate).HasPrecision(3);

                entity.Property(e => e.AgreedCurrency).IsUnicode(false);

                entity.Property(e => e.ClientLegalName).IsUnicode(false);

                entity.Property(e => e.ClientMarketName).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CommitmentDate).HasPrecision(3);

                entity.Property(e => e.DeliveryDate).HasPrecision(3);

                entity.Property(e => e.DeliveryTime).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.PaymentConditions).IsUnicode(false);

                entity.Property(e => e.PaymentCurrency).IsUnicode(false);

                entity.Property(e => e.ProjectNumber).IsUnicode(false);

                entity.Property(e => e.RealDeliveryDate).HasPrecision(3);

                entity.Property(e => e.SalesPerson).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<ProviderContacts>(entity =>
            {
                entity.HasKey(e => new { e.ProviderId, e.ContactId })
                    .HasName("PK__Provider__108A0A24318D726D");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ProviderContacts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_ProviderContacts_Contacts");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.ProviderContacts)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK_ProviderContacts_Providers");
            });

            modelBuilder.Entity<Providers>(entity =>
            {
                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.CreditLimit).IsUnicode(false);

                entity.Property(e => e.FiscalAddress).IsUnicode(false);

                entity.Property(e => e.LegalName).IsUnicode(false);

                entity.Property(e => e.MarketName).IsUnicode(false);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.PaymentCondition).IsUnicode(false);

                entity.Property(e => e.PhoneNumber).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.Province).IsUnicode(false);

                entity.Property(e => e.TypeOfPayment).IsUnicode(false);

                entity.Property(e => e.Website).IsUnicode(false);
            });

            modelBuilder.Entity<PurchaseArticles>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.TradeMark).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.HasOne(d => d.Family)
                    .WithMany(p => p.PurchaseArticles)
                    .HasForeignKey(d => d.FamilyId)
                    .HasConstraintName("FK_ShoppingArticles_ArticleFamilies");
            });

            modelBuilder.Entity<PurchaseOrders>(entity =>
            {
                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasPrecision(3);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.IssuedDate).HasPrecision(3);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.OrderNumber).IsUnicode(false);

                entity.Property(e => e.ReceptionDate).HasPrecision(3);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_PurchaseOrders_Projects");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK_PurchaseOrders_Providers");
            });

            modelBuilder.Entity<PurchaseOrdersView>(entity =>
            {
                entity.ToView("PurchaseOrdersView");

                entity.Property(e => e.ClientMarketName).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasPrecision(3);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.IssuedDate).HasPrecision(3);

                entity.Property(e => e.Observations).IsUnicode(false);

                entity.Property(e => e.OrderNumber).IsUnicode(false);

                entity.Property(e => e.ProjectNumber).IsUnicode(false);

                entity.Property(e => e.ProviderLegalName).IsUnicode(false);

                entity.Property(e => e.ReceptionDate).HasPrecision(3);

                entity.Property(e => e.RequisitionNumber).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<Quotes>(entity =>
            {
                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.DateUpdated).HasPrecision(3);

                entity.Property(e => e.SKU).IsUnicode(false);

                entity.HasOne(d => d.Article)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.ArticleId)
                    .HasConstraintName("FK_Quotes_PurchaseArticles");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.Quotes)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK_Quotes_Providers");
            });

            modelBuilder.Entity<QuotesView>(entity =>
            {
                entity.ToView("QuotesView");

                entity.Property(e => e.ArticleCode).IsUnicode(false);

                entity.Property(e => e.ArticleName).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.DateUpdated).HasPrecision(3);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.ProviderLegalName).IsUnicode(false);

                entity.Property(e => e.ProviderMarketName).IsUnicode(false);

                entity.Property(e => e.SKU).IsUnicode(false);
            });

            modelBuilder.Entity<RequisitionArticles>(entity =>
            {
                entity.HasKey(e => new { e.RequisitionId, e.ProjectId, e.ArticleId })
                    .HasName("PK__Requisit__3DBA4BB02CE5CF19");

                entity.HasOne(d => d.Article)
                    .WithMany(p => p.RequisitionArticles)
                    .HasForeignKey(d => d.ArticleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequisitionArticles_PurchaseArticles");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.RequisitionArticles)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_RequisitionArticles_Projects");

                entity.HasOne(d => d.Requisition)
                    .WithMany(p => p.RequisitionArticles)
                    .HasForeignKey(d => d.RequisitionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequisitionArticles_Requisitions");
            });

            modelBuilder.Entity<RequisitionArticlesView>(entity =>
            {
                entity.ToView("RequisitionArticlesView");

                entity.Property(e => e.ArticleCode).IsUnicode(false);

                entity.Property(e => e.ArticleName).IsUnicode(false);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.ProjectNumber).IsUnicode(false);

                entity.Property(e => e.RequiredDate).HasPrecision(3);

                entity.Property(e => e.RequisitionNumber).IsUnicode(false);
            });

            modelBuilder.Entity<Requisitions>(entity =>
            {
                entity.Property(e => e.IssuedDate).HasPrecision(3);

                entity.Property(e => e.RequiredDate).HasPrecision(3);

                entity.Property(e => e.RequisitionNumber).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Requisitions)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Requisitions_AspNetUsers");
            });

            modelBuilder.Entity<RequisitionsView>(entity =>
            {
                entity.ToView("RequisitionsView");

                entity.Property(e => e.IssuedDate).HasPrecision(3);

                entity.Property(e => e.RequiredDate).HasPrecision(3);

                entity.Property(e => e.RequisitionNumber).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.UserShortName).IsUnicode(false);
            });

            modelBuilder.Entity<UserInformation>(entity =>
            {
                entity.HasKey(e => e.AspNetUserId)
                    .HasName("PK__UserInfo__F42021A73BA416F8");

                entity.Property(e => e.AspNetUserId).IsUnicode(false);

                entity.Property(e => e.BirthDate).HasPrecision(3);

                entity.Property(e => e.FatherSurname).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.MiddleName).IsUnicode(false);

                entity.Property(e => e.MotherSurname).IsUnicode(false);

                entity.HasOne(d => d.AspNetUser)
                    .WithOne(p => p.UserInformation)
                    .HasForeignKey<UserInformation>(d => d.AspNetUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserInformation_AspNetUsers");
            });

            modelBuilder.Entity<UserInformationView>(entity =>
            {
                entity.ToView("UserInformationView");

                entity.Property(e => e.BirthDate).HasPrecision(3);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FullName).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.ShortName).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}